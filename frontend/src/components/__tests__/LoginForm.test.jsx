import React from 'react'
import { render, screen, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import LoginForm from '../LoginForm.jsx'

describe('LoginForm', () => {\n  const defaultProps = {\n    onSubmit: jest.fn(),\n    loading: false,\n    error: null\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test('renders login form fields', () => {\n    render(<LoginForm {...defaultProps} />)\n    \n    expect(screen.getByLabelText(/email address/i)).toBeInTheDocument()\n    expect(screen.getByLabelText(/password/i)).toBeInTheDocument()\n    expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument()\n    expect(screen.getByLabelText(/remember me/i)).toBeInTheDocument()\n  })\n\n  test('shows validation errors for empty fields', async () => {\n    const user = userEvent.setup()\n    render(<LoginForm {...defaultProps} />)\n    \n    const submitButton = screen.getByRole('button', { name: /sign in/i })\n    await user.click(submitButton)\n    \n    await waitFor(() => {\n      expect(screen.getByText(/email is required/i)).toBeInTheDocument()\n      expect(screen.getByText(/password is required/i)).toBeInTheDocument()\n    })\n  })\n\n  test('shows validation error for invalid email', async () => {\n    const user = userEvent.setup()\n    render(<LoginForm {...defaultProps} />)\n    \n    const emailInput = screen.getByLabelText(/email address/i)\n    await user.type(emailInput, 'invalid-email')\n    await user.tab() // Trigger onBlur validation\n    \n    await waitFor(() => {\n      expect(screen.getByText(/please enter a valid email address/i)).toBeInTheDocument()\n    })\n  })\n\n  test('shows validation error for short password', async () => {\n    const user = userEvent.setup()\n    render(<LoginForm {...defaultProps} />)\n    \n    const passwordInput = screen.getByLabelText(/password/i)\n    await user.type(passwordInput, '123')\n    await user.tab() // Trigger onBlur validation\n    \n    await waitFor(() => {\n      expect(screen.getByText(/password must be at least 6 characters/i)).toBeInTheDocument()\n    })\n  })\n\n  test('submits form with valid data', async () => {\n    const user = userEvent.setup()\n    const mockSubmit = jest.fn()\n    render(<LoginForm {...defaultProps} onSubmit={mockSubmit} />)\n    \n    const emailInput = screen.getByLabelText(/email address/i)\n    const passwordInput = screen.getByLabelText(/password/i)\n    const rememberMeCheckbox = screen.getByLabelText(/remember me/i)\n    const submitButton = screen.getByRole('button', { name: /sign in/i })\n    \n    await user.type(emailInput, 'test@example.com')\n    await user.type(passwordInput, 'password123')\n    await user.click(rememberMeCheckbox)\n    await user.click(submitButton)\n    \n    await waitFor(() => {\n      expect(mockSubmit).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password123',\n        rememberMe: true\n      })\n    })\n  })\n\n  test('toggles password visibility', async () => {\n    const user = userEvent.setup()\n    render(<LoginForm {...defaultProps} />)\n    \n    const passwordInput = screen.getByLabelText(/password/i)\n    const toggleButton = screen.getByRole('button', { name: '' }) // Eye icon button\n    \n    expect(passwordInput).toHaveAttribute('type', 'password')\n    \n    await user.click(toggleButton)\n    expect(passwordInput).toHaveAttribute('type', 'text')\n    \n    await user.click(toggleButton)\n    expect(passwordInput).toHaveAttribute('type', 'password')\n  })\n\n  test('displays error message when provided', () => {\n    render(<LoginForm {...defaultProps} error=\"Invalid credentials\" />)\n    \n    expect(screen.getByText(/login failed/i)).toBeInTheDocument()\n    expect(screen.getByText(/invalid credentials/i)).toBeInTheDocument()\n  })\n\n  test('disables form when loading', () => {\n    render(<LoginForm {...defaultProps} loading={true} />)\n    \n    expect(screen.getByLabelText(/email address/i)).toBeDisabled()\n    expect(screen.getByLabelText(/password/i)).toBeDisabled()\n    expect(screen.getByRole('button', { name: /signing in/i })).toBeDisabled()\n  })\n\n  test('shows loading state in submit button', () => {\n    render(<LoginForm {...defaultProps} loading={true} />)\n    \n    expect(screen.getByText(/signing in.../i)).toBeInTheDocument()\n    expect(screen.queryByText(/sign in/i)).not.toBeInTheDocument()\n  })\n\n  test('has forgot password link', () => {\n    render(<LoginForm {...defaultProps} />)\n    \n    const forgotPasswordLink = screen.getByText(/forgot your password/i)\n    expect(forgotPasswordLink).toBeInTheDocument()\n    expect(forgotPasswordLink.closest('a')).toHaveAttribute('href', '/forgot-password')\n  })\n\n  test('has register link', () => {\n    render(<LoginForm {...defaultProps} />)\n    \n    const registerLink = screen.getByText(/create one here/i)\n    expect(registerLink).toBeInTheDocument()\n    expect(registerLink.closest('a')).toHaveAttribute('href', '/register')\n  })\n})